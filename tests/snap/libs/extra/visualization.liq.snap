># VU meter: display the audio volume (RMS in dB) on the standard output.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Visualization
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~rms_min Minimal volume (dB).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~rms_max Maximal volume (dB).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~scroll Update the display in the same line.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~window Duration in seconds of volume computation.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def vumeter(~rms_min=-25., ~rms_max=-5., ~window=0.5, ~scroll=false, s)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^^^^^^ source.liquidsoap
#                                     ^ source.liquidsoap constant.numeric.integer
#                                      ^^^^^^^^^^^ source.liquidsoap
#                                                 ^^^ source.liquidsoap constant.numeric.float
#                                                    ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  screen_width = 80
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^^ source.liquidsoap constant.numeric.integer
>  bar_width = screen_width
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  let s = rms(duration=window, s)
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  def display()
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^ source.liquidsoap
>    v = dB_of_lin(s.rms())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    x = (v - rms_min) / (rms_max - rms_min)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    x = if x < 0. then 0. else x end
#^^^^^^^^ source.liquidsoap
#        ^^ source.liquidsoap keyword.control.liquidsoap
#          ^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
#                      ^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
#                          ^^^^ source.liquidsoap keyword.control.liquidsoap
#                              ^^^ source.liquidsoap
#                                 ^^^ source.liquidsoap keyword.control.liquidsoap
>    x = if x > 1. then 1. else x end
#^^^^^^^^ source.liquidsoap
#        ^^ source.liquidsoap keyword.control.liquidsoap
#          ^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
#                      ^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
#                          ^^^^ source.liquidsoap keyword.control.liquidsoap
#                              ^^^ source.liquidsoap
#                                 ^^^ source.liquidsoap keyword.control.liquidsoap
>    n = int_of_float(x * float_of_int(bar_width))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    bar = ref("")
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^^ source.liquidsoap
>    if not scroll then bar := "\r" end
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
#                      ^^^^^^^^ source.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                               ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                  ^ source.liquidsoap
#                                   ^^^ source.liquidsoap keyword.control.liquidsoap
>    for _ = 0 to n-1 do bar := bar() ^ "=" end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^ source.liquidsoap
#            ^ source.liquidsoap constant.numeric.integer
#             ^ source.liquidsoap
#              ^^ source.liquidsoap keyword.control.liquidsoap
#                ^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^ source.liquidsoap
#                     ^^ source.liquidsoap keyword.control.liquidsoap
#                       ^^^^^^^^^^^^^^^^ source.liquidsoap
#                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^ source.liquidsoap
#                                           ^^^ source.liquidsoap keyword.control.liquidsoap
>    for _ = 0 to bar_width-n-1 do bar := bar() ^ "." end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^ source.liquidsoap
#            ^ source.liquidsoap constant.numeric.integer
#             ^ source.liquidsoap
#              ^^ source.liquidsoap keyword.control.liquidsoap
#                ^^^^^^^^^^^^^ source.liquidsoap
#                             ^ source.liquidsoap constant.numeric.integer
#                              ^ source.liquidsoap
#                               ^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                    ^ source.liquidsoap
#                                                     ^^^ source.liquidsoap keyword.control.liquidsoap
>    bar := bar() ^ " " ^ string(v)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^^^^^^^^^^^^^ source.liquidsoap
>    if scroll then bar := bar() ^ "\n" end
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^ source.liquidsoap
#              ^^^^ source.liquidsoap keyword.control.liquidsoap
#                  ^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap
#                                       ^^^ source.liquidsoap keyword.control.liquidsoap
>    print(newline=false, bar())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.run(fast=true, every=window, display)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># VU meter: display the audio volume (RMS in dB). This adds a video track to the
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># source.
#^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Visualization
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~rms_min Minimal volume (dB).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~rms_max Maximal volume (dB).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~window Duration in seconds of volume computation.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~color Color of the display (0xRRGGBB).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~persistence Persistence of the display (s).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def video.vumeter(~rms_min=-35., ~rms_max=0., ~window=0.1, ~color=0xff0000, ~persistence=0., s)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                            ^^ source.liquidsoap constant.numeric.integer
#                              ^^^^^^^^^^^^ source.liquidsoap
#                                          ^ source.liquidsoap constant.numeric.integer
#                                           ^^^^^^^^^^^ source.liquidsoap
#                                                      ^^^ source.liquidsoap constant.numeric.float
#                                                         ^^^^^^^^^ source.liquidsoap
#                                                                  ^ source.liquidsoap constant.numeric.integer
#                                                                   ^^^ source.liquidsoap
#                                                                      ^^^^ source.liquidsoap constant.numeric.integer
#                                                                          ^^^^^^^^^^^^^^^ source.liquidsoap
#                                                                                         ^ source.liquidsoap constant.numeric.integer
#                                                                                          ^^^^^^ source.liquidsoap
>  s = source(s.{video = source.tracks(blank()).video})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s = rms(duration=window, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  height = video.frame.height()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  width = ref(0)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>  def update()
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^ source.liquidsoap
>    v = dB_of_lin(s.rms())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    x = (v - rms_min) / (rms_max - rms_min)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    x = if x < 0. then 0. else x end
#^^^^^^^^ source.liquidsoap
#        ^^ source.liquidsoap keyword.control.liquidsoap
#          ^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
#                      ^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
#                          ^^^^ source.liquidsoap keyword.control.liquidsoap
#                              ^^^ source.liquidsoap
#                                 ^^^ source.liquidsoap keyword.control.liquidsoap
>    x = if x > 1. then 1. else x end
#^^^^^^^^ source.liquidsoap
#        ^^ source.liquidsoap keyword.control.liquidsoap
#          ^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
#                      ^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
#                          ^^^^ source.liquidsoap keyword.control.liquidsoap
#                              ^^^ source.liquidsoap
#                                 ^^^ source.liquidsoap keyword.control.liquidsoap
>    width := int_of_float(x * float_of_int(video.frame.width()))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.run(fast=true, every=window, update)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s = video.add_rectangle(width=width, height=height, color=color, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  video.persistence(duration=persistence, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>