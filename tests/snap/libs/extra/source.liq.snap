># Apply a function to the first track of a source
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param fn The applied function.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param s The input source.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def map_first_track(~id=null("map_first_track"),fn,s)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^^^^^^^ source.liquidsoap
>  fallback(id=id,track_sensitive=true,[fn((once(s):source)),s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Same operator as rotate but merges tracks from each sources.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># For instance, `rotate.merge([intro,main,outro])` creates a source
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># that plays a sequence `[intro,main,outro]` as single track and loops back.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~transitions Transition functions, padded with `fun (x,y) -> y` functions.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~weights Weights of the children (padded with 1), defining for each child how many tracks are played from it per round, if that many are actually available.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param sources Sequence of sources to be merged
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def rotate.merge(~id=null("rotate.merge"),~transitions=[],~weights=[],sources)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  ready = ref(true)
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  duration = frame.duration()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  def to_first(_,new) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    ready := (not ready())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    sequence(merge=true,[blank(duration=duration),(new:source)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  transitions = if list.length(transitions) == 0 then
#^^^^^^^^^^^^^^^^ source.liquidsoap
#                ^^ source.liquidsoap keyword.control.liquidsoap
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                               ^ source.liquidsoap constant.numeric.integer
#                                                ^ source.liquidsoap
#                                                 ^^^^ source.liquidsoap keyword.control.liquidsoap
>    [to_first]
#^^^^^^^^^^^^^^^ source.liquidsoap
>  else
#^^ source.liquidsoap
#  ^^^^ source.liquidsoap keyword.control.liquidsoap
>    list.mapi((fun (i,t) ->
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^^^ source.liquidsoap keyword.control.liquidsoap
#                  ^^^^^^^^^^ source.liquidsoap
>      if i == 0 then
#^^^^^^ source.liquidsoap
#      ^^ source.liquidsoap keyword.control.liquidsoap
#        ^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^ source.liquidsoap
#                ^^^^ source.liquidsoap keyword.control.liquidsoap
>        (fun (old,new) ->
#^^^^^^^^^ source.liquidsoap
#         ^^^ source.liquidsoap keyword.control.liquidsoap
#            ^^^^^^^^^^^^^^ source.liquidsoap
>          to_first(old,t(old,new)))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      else t end), transitions)
#^^^^^^ source.liquidsoap
#      ^^^^ source.liquidsoap keyword.control.liquidsoap
#          ^^^ source.liquidsoap
#             ^^^ source.liquidsoap keyword.control.liquidsoap
#                ^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  s = rotate(transitions=transitions,weights=weights,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  let {track_marks=_, ...tracks} = source.tracks(s)
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s = source(tracks)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  switch(id=id,replay_metadata=false,track_sensitive=false,[(ready, s), ({not ready()}, s)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>
># Rotate between overlapping sources. Next track starts according
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># to 'liq_start_next' offset metadata.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~start_next Metadata field indicating when the next track should start, relative to current track's time.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~weights Relative weight of the sources in the sum. The empty list stands for the homogeneous distribution.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param sources Sources to toggle from
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def overlap_sources(~id=null("overlap_sources"),~normalize=false,
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>                    ~start_next="liq_start_next",
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                 ^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^^ source.liquidsoap
>                    ~weights=[],sources) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  position = ref(0)
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap constant.numeric.integer
#                  ^^ source.liquidsoap
>  length   = list.length(sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  def current_position() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    pos = position()
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    position := (pos + 1) mod length
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^^^^^^ source.liquidsoap
>    pos
#^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  ready_list = list.map(fun (_) -> ref(false),sources)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                        ^^^ source.liquidsoap keyword.control.liquidsoap
#                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  grab_ready = fun(n) -> list.nth(default=ref(false),ready_list,n)
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^^^ source.liquidsoap keyword.control.liquidsoap
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  def set_ready(pos,b) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    is_ready = grab_ready(pos)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    is_ready := b
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  # Start next track on_offset
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  def on_start_next(_,_) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    set_ready(current_position(),true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  on_offset = fun(s) -> on_offset(force=true,override=start_next,on_start_next,s)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^^^ source.liquidsoap keyword.control.liquidsoap
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  sources = list.map(on_offset,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Disable after each track
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  def disable(pos,source) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    def disable(_) =
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^ source.liquidsoap
>      set_ready(pos,false)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>    source.on_track(disable)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  list.iteri(disable,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Relay metadata from all sources
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  send_to_main_source = ref(fun (_) -> ())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                            ^^^ source.liquidsoap keyword.control.liquidsoap
#                               ^^^^^^^^^^^^ source.liquidsoap
>
>  def relay_metadata(m) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    fn = send_to_main_source()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    fn(m)
#^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  list.iter(fun (s) -> s.on_metadata(relay_metadata),sources)
#^^^^^^^^^^^^ source.liquidsoap
#            ^^^ source.liquidsoap keyword.control.liquidsoap
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  def drop_metadata(s) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    let {metadata=_, ...tracks} = source.tracks(s)
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    source(tracks)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  # Now drop all metadata
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  sources = list.map(drop_metadata,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Wrap sources into switches.
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  def make_switch(pos,source) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    is_ready = grab_ready(pos)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    switch(track_sensitive=true,[(is_ready,source)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  sources = list.mapi(make_switch,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Initiate the whole thing.
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  set_ready(current_position(),true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Create main source
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  source = add(id=id,normalize=normalize,weights=weights,sources)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Set send_to_main_source
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  s = insert_metadata(source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  send_to_main_source := fun (m) -> s.insert_metadata(m)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^^^ source.liquidsoap keyword.control.liquidsoap
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Append speech-synthesized tracks reading the metadata.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Metadata
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~pattern Pattern to use
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param s The source to use
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def source.say_metadata =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  def pattern(m) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^ source.liquidsoap
>    artist = m["artist"]
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^^ source.liquidsoap
>    title = m["title"]
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^^ source.liquidsoap
>    artist_predicate =
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      if artist != "" then
#^^^^^^ source.liquidsoap
#      ^^ source.liquidsoap keyword.control.liquidsoap
#        ^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^ source.liquidsoap
#                      ^^^^ source.liquidsoap keyword.control.liquidsoap
>        "It was #{artist} playing "
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
>      else
#^^^^^^ source.liquidsoap
#      ^^^^ source.liquidsoap keyword.control.liquidsoap
>        ""
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^ source.liquidsoap string.quoted.double.liquidsoap
>      end
#^^^^^^ source.liquidsoap
#      ^^^ source.liquidsoap keyword.control.liquidsoap
>    say_metadata = "#{artist_predicate}#{title}"
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^ source.liquidsoap string.quoted.double.liquidsoap
>    say_metadata = r/:/g.replace(fun (_) -> '$(colon)', say_metadata)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^^ source.liquidsoap string.regexp.liquidsoap
#                     ^ source.liquidsoap string.regexp.liquidsoap
#                      ^^ source.liquidsoap string.regexp.liquidsoap
#                        ^^^^^^^^^ source.liquidsoap
#                                 ^^^ source.liquidsoap keyword.control.liquidsoap
#                                    ^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.single.liquidsoap
#                                             ^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
#                                                     ^ source.liquidsoap string.quoted.single.liquidsoap
#                                                      ^^^^^^^^^^^^^^^^ source.liquidsoap
>    "say:#{say_metadata}"
#^^^^ source.liquidsoap
#    ^ source.liquidsoap string.quoted.double.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^ source.liquidsoap string.quoted.double.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  fun (~id=null("source.say_metadata"), ~pattern=pattern, s) ->
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^ source.liquidsoap
#                ^ source.liquidsoap string.quoted.double.liquidsoap
#                 ^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    append(id=id, s, fun (m) -> once(single(pattern(m))))
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^ source.liquidsoap keyword.control.liquidsoap
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Regularly insert track boundaries in a stream (useful for testing tracks).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~every Duration of a track (in seconds).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~metadata Metadata for tracks.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param s The stream.
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def chop(~every=getter(3.), ~metadata=getter([]), s) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s = insert_metadata(s)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  # Track time in the source's context:
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  start_time = ref(0.)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^^^ source.liquidsoap
>  def f() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^ source.liquidsoap
>    if getter.get(every) <= s.time() - start_time() then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      start_time := s.time()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      s.insert_metadata(new_track=true, getter.get(metadata))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  source.on_frame(s, f)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Regularly skip tracks from a source (useful for testing skipping).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~every How often to skip tracks.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param s The stream.
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def skipper(~every=getter(5.), s) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                          ^ source.liquidsoap constant.numeric.integer
#                           ^^^^^^^^^ source.liquidsoap
>  start_time = ref(0.)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^^^ source.liquidsoap
>  def f() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^ source.liquidsoap
>    if getter.get(every) <= s.time() - start_time() then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      start_time := s.time()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      s.skip()
#^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  source.on_frame(s, f)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>let stdlib_fallback = fallback
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
># Special track insensitive fallback that always skips current song before
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># switching.
#^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Track processing
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param s The main source.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~fallback The fallback source. Defaults to `blank` if `null`.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def fallback.skip(s,~fallback=null())
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  fallback = fallback ?? (blank():source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  avail = ref(true)
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  def check()
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^ source.liquidsoap
>    old = avail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    avail := source.is_ready(s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    if not old and avail() then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^ source.liquidsoap
#               ^^^ source.liquidsoap keyword.operator.liquidsoap
#                  ^^^^^^^^^ source.liquidsoap
#                           ^^^^ source.liquidsoap keyword.control.liquidsoap
>      source.skip(fallback)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  s = stdlib_fallback(track_sensitive=false, [s, fallback])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  # TODO: could we have something more efficient that checking on every frame
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  source.on_frame(s, check)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>