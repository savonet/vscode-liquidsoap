>%ifdef input.gstreamer.video
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
># Stream from a video4linux2 input device, such as a webcam.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~device V4L2 device to use.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~on_error Callback executed when an error happens.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def input.v4l2(~id=null(),~device="/dev/video0",~on_error=fun(_)->3.)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap constant.numeric.integer
#            ^ source.liquidsoap
#             ^ source.liquidsoap constant.numeric.integer
#              ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^^^^^^^^^^^ source.liquidsoap
#                                                          ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                             ^^^^^ source.liquidsoap
#                                                                  ^ source.liquidsoap constant.numeric.integer
#                                                                   ^^^ source.liquidsoap
>  pipeline = "v4l2src device=#{device}"
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap string.quoted.double.liquidsoap
#              ^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
>  input.gstreamer.video(id=id, pipeline=pipeline, on_error=on_error)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Stream from a video4linux2 input device, such as a webcam.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~device V4L2 device to use.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~on_error Callback executed when an error happens.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def input.v4l2_with_audio(~id=null(),~device="/dev/video0",~on_error=fun(_)->3.)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap constant.numeric.integer
#            ^ source.liquidsoap
#             ^^ source.liquidsoap constant.numeric.integer
#               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                          ^^^^^^^^^^^ source.liquidsoap
#                                                                     ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                        ^^^^^ source.liquidsoap
#                                                                             ^ source.liquidsoap constant.numeric.integer
#                                                                              ^^^ source.liquidsoap
>  audio_pipeline = "autoaudiosrc"
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^ source.liquidsoap string.quoted.double.liquidsoap
>  video_pipeline = "v4l2src device=#{device}"
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
>  input.gstreamer.audio_video(id=id, audio_pipeline=audio_pipeline, video_pipeline=video_pipeline, on_error=on_error)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>let gstreamer = ()
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^ source.liquidsoap
>let gstreamer.single = ()
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
># Play a single audio file using GStreamer.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~on_error Callback executed when an error happens.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param uri URI of the file to be played.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def gstreamer.single.audio(~id=null(),~on_error=fun(_)->3.,uri) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                   ^^^^^ source.liquidsoap
#                                                        ^ source.liquidsoap constant.numeric.integer
#                                                         ^^^^^^^^^ source.liquidsoap
>  uri = getter.function(uri)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  input.gstreamer.audio(id=id, on_error=on_error, pipeline={"filesrc location=\"#{uri()}\""})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                             ^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                              ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                        ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                           ^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>
># Play an http live stream.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~on_error Callback executed when an error happens.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param uri URI of the HLS stream index.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def output.file.hls.gstreamer(~id=null(),~on_error=fun(_)->3.,uri) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                      ^^^^^ source.liquidsoap
#                                                           ^ source.liquidsoap constant.numeric.integer
#                                                            ^^^^^^^^^ source.liquidsoap
>  uri = getter.function(uri)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  pipeline = {"souphttpsrc location=\"#{uri()}\" ! tee name=t"}
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                      ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                ^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                              ^^ source.liquidsoap
>  audio_pipeline = "t. ! queue"
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  video_pipeline = "t. ! queue"
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  input.gstreamer.audio_video(id=id, pipeline=pipeline, audio_pipeline=audio_pipeline, video_pipeline=video_pipeline, on_error=on_error)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Play an audio-only http live stream.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Force the value of the source ID.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~on_error Callback executed when an error happens.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param uri URI of the HLS stream index.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def output.file.hls.gstreamer.audio(~id=null(),~on_error=fun(_)->3.,uri) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                         ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                            ^^^^^ source.liquidsoap
#                                                                 ^ source.liquidsoap constant.numeric.integer
#                                                                  ^^^^^^^^^ source.liquidsoap
>  uri = getter.function(uri)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  pipeline = {"souphttpsrc location=\"#{uri()}\""}
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                      ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^^ source.liquidsoap
>  input.gstreamer.audio(id=id, pipeline=pipeline, on_error=on_error)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Encode an x264 video file using gstreamer
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Output
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param fname Encoded file name
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param source Source
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def gstreamer.encode_x264_avi(fname, source)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^^^ source.liquidsoap constant.numeric.integer
#                          ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  output.gstreamer.video(pipeline="videoconvert ! x264enc ! avimux ! filesink location=\"#{fname}\"", source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                       ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                         ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                 ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                    ^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Encode jpeg video file using gstreamer
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Output
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param fname Encoded file name
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param source Source
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def gstreamer.encode_jpeg_avi(fname, source)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  output.gstreamer.video(pipeline="videoconvert ! jpegenc ! avimux ! filesink location=\"#{fname}\"", source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                       ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                         ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                 ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                    ^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Encode a mp3 file using gstreamer
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Output
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param fname Encoded file name
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param source Source
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def gstreamer.encode_mp3(fname, source)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^^^^^^^^^ source.liquidsoap
>  output.gstreamer.audio(pipeline="audioconvert ! lamemp3enc ! filesink location=\"#{fname}\"", source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                 ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                   ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                           ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                              ^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>let gstreamer.rtp = ()
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
># Broadcast a video in RTP. In order to play it, save the following in `xxx.sdp`
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># and use `vlc xxx.sdp`:
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># ```
#^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># v=0
#^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># m=video 5000 RTP/AVP 96
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># c=IN IP4 127.0.0.1
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># a=rtpmap:96 MP4V-ES/90000
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># ```
#^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Output
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def gstreamer.rtp.mpeg4(~host="127.0.0.1",~port=5000,source)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap constant.numeric.integer
#                       ^^^^^^^ source.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                               ^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                                         ^^^^^^^ source.liquidsoap
#                                                ^^^^ source.liquidsoap constant.numeric.integer
#                                                    ^^^^^^^^^ source.liquidsoap
>  output.gstreamer.video(pipeline="videoconvert ! avenc_mpeg4 ! rtpmp4vpay config-interval=2 ! udpsink host=#{host} port=#{port}", source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                                                 ^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Stream live on youtube. You need the following Gstreamer plugins: flvmux, rtmpsink, x264enc and a suitable AAC encoder (see `audio_encoder` params).
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~id Source ID
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~video_bitrate Video bitrate
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~audio_encoder Audio encoder. Can be one of: "fdkaacenc", "voaacenc"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~audio_bitrate Audio bitrate
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~url Server URL
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param ~key Secret key
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @param source Source to stream
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Output
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def output.youtube.live.gstreamer(~id=null(),
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  ~video_bitrate=2000,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^^^^ source.liquidsoap constant.numeric.integer
#                     ^^ source.liquidsoap
>  ~audio_encoder="fdkaacenc",
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^^ source.liquidsoap
>  ~audio_bitrate=128000,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^^^^^^ source.liquidsoap constant.numeric.integer
#                       ^^ source.liquidsoap
>  ~url="rtmp://a.rtmp.youtube.com/live2",
#^^^^^^^ source.liquidsoap
#       ^ source.liquidsoap string.quoted.double.liquidsoap
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                        ^^ source.liquidsoap
>  ~key,
#^^^^^^^^ source.liquidsoap
>  source) =
#^^^^^^^^^^^^ source.liquidsoap
>  video_pipeline = "videoconvert ! \
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
>      x264enc bitrate=#{video_bitrate} byte-stream=false key-int-max=60 bframes=0 aud=true tune=zerolatency ! \
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
>      video/x-h264,profile=main ! queue ! mux."
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  audio_pipeline = "audioconvert ! #{audio_encoder} bitrate=#{audio_bitrate} ! queue ! mux."
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                           ^ source.liquidsoap string.quoted.double.liquidsoap
>  key = (key : string)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  pipeline = "flvmux streamable=true name=mux ! rtmpsink location=\"#{url}/#{key} app=live2\""
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap string.quoted.double.liquidsoap
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                  ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                    ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                           ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                                                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
>
>  output.gstreamer.audio_video(id=id,video_pipeline=video_pipeline,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    audio_pipeline=audio_pipeline,pipeline=pipeline,source)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
># Test audio-video source using GStreamer.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @category Source / Input
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># @flag extra
#^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>def video.testsrc.gstreamer(~id=null())
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  video_pipeline="videotestsrc"
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  audio_pipeline="audiotestsrc"
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  input.gstreamer.audio_video(id=id,video_pipeline=video_pipeline, audio_pipeline=audio_pipeline)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>%endif
#^^^^^^^ source.liquidsoap
>