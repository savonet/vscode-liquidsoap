>log.level.set(4)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>
>keys = "1234567890*#ABCD"
#^^^^^^^ source.liquidsoap
#       ^ source.liquidsoap string.quoted.double.liquidsoap
#        ^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^ source.liquidsoap string.quoted.double.liquidsoap
>detected = ref("")
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^ source.liquidsoap string.quoted.double.liquidsoap
#                 ^^ source.liquidsoap
>
>def f(k)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^ source.liquidsoap
>  # Skip test for now.
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  # test.skip()
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>  print("Detected key #{k}")
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^^ source.liquidsoap
>  detected := !detected ^ k
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  if k == "D" then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^ source.liquidsoap
#          ^ source.liquidsoap string.quoted.double.liquidsoap
#           ^ source.liquidsoap string.quoted.double.liquidsoap
#            ^ source.liquidsoap string.quoted.double.liquidsoap
#             ^ source.liquidsoap
#              ^^^^ source.liquidsoap keyword.control.liquidsoap
>    if !detected == keys then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    else
#^^^^ source.liquidsoap
#    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.fail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = amplify(0.5, dtmf(duration=1., keys))
#^^^^^^^^^^^^ source.liquidsoap
#            ^^^ source.liquidsoap constant.numeric.float
#               ^^^^^^^^^^^^^^^^ source.liquidsoap
#                               ^ source.liquidsoap constant.numeric.integer
#                                ^^^^^^^^^^ source.liquidsoap
>s = audio.encode.pcm_s16(s)
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^ source.liquidsoap constant.numeric.integer
#                        ^^^^ source.liquidsoap
>s = add([s, blank()])
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>s = audio.decode.pcm_s16(s)
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^ source.liquidsoap constant.numeric.integer
#                        ^^^^ source.liquidsoap
># s = add([s, amplify(0.5, noise())]) # Removed to make the test deterministic
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>s = dtmf.detect(debug=false, s, f)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>output.dummy(fallible=true, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>