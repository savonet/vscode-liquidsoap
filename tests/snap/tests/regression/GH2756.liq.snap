>def f() =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^ source.liquidsoap
>  tmp = file.temp("foo", "bla")
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                   ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^^ source.liquidsoap
>  on_cleanup({file.remove(tmp)})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  s = insert_metadata(sine())
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  insert_metadata = s.insert_metadata
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  err = ref(null())
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  def on_frame() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^ source.liquidsoap
>    null.case(err(), {()}, fun (e) -> begin
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                           ^^^ source.liquidsoap keyword.control.liquidsoap
#                              ^^^^^^^^ source.liquidsoap
#                                      ^^^^^ source.liquidsoap keyword.control.liquidsoap
>      err := null()
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      error.raise(e)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end)
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  s = source.on_frame(s, on_frame)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  reopen_when_ref = ref(true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  reopen_delay = ref(120.)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^ source.liquidsoap constant.numeric.integer
#                        ^^^ source.liquidsoap
>  callstack = ref([])
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  def reopen_on_metadata(_) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    print("Got metadata!")
#^^^^^^^^^^ source.liquidsoap
#          ^ source.liquidsoap string.quoted.double.liquidsoap
#           ^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^^ source.liquidsoap
>    callstack := [...(callstack()), "metadata"]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                     ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^ source.liquidsoap
>    true
#^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  def reopen_on_error(_) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    print("Got error!")
#^^^^^^^^^^ source.liquidsoap
#          ^ source.liquidsoap string.quoted.double.liquidsoap
#           ^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^^ source.liquidsoap
>    callstack := [...(callstack()), "error"]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                     ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                                           ^^ source.liquidsoap
>    2.
#^^^^ source.liquidsoap
#    ^ source.liquidsoap constant.numeric.integer
#     ^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  def reopen_when() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^ source.liquidsoap
>    r = reopen_when_ref()
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    if r then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^ source.liquidsoap
#         ^^^^ source.liquidsoap keyword.control.liquidsoap
>      print("Got reopen!")
#^^^^^^^^^^^^ source.liquidsoap
#            ^ source.liquidsoap string.quoted.double.liquidsoap
#             ^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^^ source.liquidsoap
>      callstack := [...(callstack()), "reload"]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^ source.liquidsoap
>      reopen_when_ref := false
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>
>    r
#^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  output.file(reopen_on_metadata=reopen_on_metadata,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>              reopen_on_error=reopen_on_error,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>              reopen_when=reopen_when,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>              reopen_delay=reopen_delay,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>              %wav,tmp,s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>  thread.run(delay=1., {insert_metadata([("foo", "bla")])})
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                                           ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^^ source.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                      ^^^^^^ source.liquidsoap
>  thread.run(delay=5., {err := error.failure})
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  thread.run(delay=8., {
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap constant.numeric.integer
#                    ^^^^^ source.liquidsoap
>    reopen_delay := 1.
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap constant.numeric.integer
#                     ^^ source.liquidsoap
>    reopen_when_ref := true
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  })
#^^^^^ source.liquidsoap
>  thread.run(delay=10., {
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^^ source.liquidsoap constant.numeric.integer
#                     ^^^^^ source.liquidsoap
>    if callstack() == ["metadata","error","reload"] then test.pass() else test.fail() end
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                 ^ source.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                                         ^ source.liquidsoap
#                                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                                           ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^ source.liquidsoap
#                                                    ^^^^ source.liquidsoap keyword.control.liquidsoap
#                                                        ^^^^^^^^^^^^^ source.liquidsoap
#                                                                     ^^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                         ^^^^^^^^^^^^^ source.liquidsoap
#                                                                                      ^^^ source.liquidsoap keyword.control.liquidsoap
>  })
#^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>test.check(f)
#^^^^^^^^^^^^^^ source.liquidsoap
>