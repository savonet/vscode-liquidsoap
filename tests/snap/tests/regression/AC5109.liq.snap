># See: https://github.com/AzuraCast/AzuraCast/issues/5109.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># Crossfade transition sources with breaks where triggering
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># end of transition too early.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>s1 = sine(duration=20.)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^^ source.liquidsoap constant.numeric.integer
#                     ^^^ source.liquidsoap
>s2 = sine(duration=20.)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^^ source.liquidsoap constant.numeric.integer
#                     ^^^ source.liquidsoap
>s = sequence([s1,s2])
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^ source.liquidsoap
#                  ^ source.liquidsoap constant.numeric.integer
#                   ^^^ source.liquidsoap
>
>def transition(a, b) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  s1 = sine(duration=0.5)
#^^^ source.liquidsoap
#   ^ source.liquidsoap constant.numeric.integer
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^ source.liquidsoap constant.numeric.float
#                        ^^ source.liquidsoap
>  s1 = metadata.map(fun (_) -> [("type", "s1")], s1)
#^^^ source.liquidsoap
#   ^ source.liquidsoap constant.numeric.integer
#    ^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^^^ source.liquidsoap keyword.control.liquidsoap
#                       ^^^^^^^^^^ source.liquidsoap
#                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                  ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^ source.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^^ source.liquidsoap
#                                                  ^ source.liquidsoap constant.numeric.integer
#                                                   ^^ source.liquidsoap
>
>  s2 = sine(duration=0.5)
#^^^ source.liquidsoap
#   ^ source.liquidsoap constant.numeric.integer
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^ source.liquidsoap constant.numeric.float
#                        ^^ source.liquidsoap
>  s2 = metadata.map(fun (_) -> [("type", "s2")], s2)
#^^^ source.liquidsoap
#   ^ source.liquidsoap constant.numeric.integer
#    ^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^^^ source.liquidsoap keyword.control.liquidsoap
#                       ^^^^^^^^^^ source.liquidsoap
#                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                  ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^ source.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^^ source.liquidsoap
#                                                  ^ source.liquidsoap constant.numeric.integer
#                                                   ^^ source.liquidsoap
>  sequence([(a.source:source), (s1:source), (s2:source), (b.source:source)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                 ^ source.liquidsoap constant.numeric.integer
#                                  ^^^^^^^^^^^^ source.liquidsoap
#                                              ^ source.liquidsoap constant.numeric.integer
#                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = cross(transition, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>def check(m) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^ source.liquidsoap
>  if m["type"] == "s2" then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^ source.liquidsoap
#       ^ source.liquidsoap string.quoted.double.liquidsoap
#        ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#            ^ source.liquidsoap string.quoted.double.liquidsoap
#             ^^^^^ source.liquidsoap
#                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                   ^^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^ source.liquidsoap
#                       ^^^^ source.liquidsoap keyword.control.liquidsoap
>    test.pass()
#^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s.on_metadata(check)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>clock.assign_new(sync="none",[s])
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^^^^^^ source.liquidsoap
>
>output.dummy(fallible=true,s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>