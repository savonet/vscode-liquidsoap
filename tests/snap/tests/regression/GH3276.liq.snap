>log.level := 4
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap constant.numeric.integer
>
>port = random.int(min=8000, max=10000)
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^^^ source.liquidsoap constant.numeric.integer
#                          ^^^^^^ source.liquidsoap
#                                ^^^^^ source.liquidsoap constant.numeric.integer
#                                     ^^ source.liquidsoap
>
>thread.run(delay=7., fun () -> begin
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap constant.numeric.integer
#                  ^^^ source.liquidsoap
#                     ^^^ source.liquidsoap keyword.control.liquidsoap
#                        ^^^^^^^ source.liquidsoap
#                               ^^^^^ source.liquidsoap keyword.control.liquidsoap
>  s = input.http("http://localhost:#{port}/test")
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^^ source.liquidsoap
>
>  track_count = ref(0)
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap constant.numeric.integer
#                     ^^ source.liquidsoap
>  s = source.on_track(s, fun (_) -> begin
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^^^ source.liquidsoap keyword.control.liquidsoap
#                            ^^^^^^^^ source.liquidsoap
#                                    ^^^^^ source.liquidsoap keyword.control.liquidsoap
>    if track_count() > 1 then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^ source.liquidsoap
#                         ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>    track_count := track_count() + 1
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                   ^ source.liquidsoap constant.numeric.integer
>  end)
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^ source.liquidsoap
>
>  output.dummy(fallible=true,s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^ source.liquidsoap
>
>output.harbor(
#^^^^^^^^^^^^^^^ source.liquidsoap
>  %vorbis,
#^^^^^^^^^^^ source.liquidsoap
>  chop(every=5., sine()),
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap constant.numeric.integer
#              ^^^^^^^^^^^^ source.liquidsoap
>  port=port,
#^^^^^^^^^^^^^ source.liquidsoap
>  mount="/test"
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
>)
#^^ source.liquidsoap
>