>log.level := 4
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap constant.numeric.integer
>
>s = sine()
#^^^^^^^^^^^ source.liquidsoap
>
>count = ref(0)
#^^^^^^^^^^^^ source.liquidsoap
#            ^ source.liquidsoap constant.numeric.integer
#             ^^ source.liquidsoap
>
>def on_close(filename) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  count := count() + 1
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap constant.numeric.integer
>
>  j = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(filename)}")
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                 ^^ source.liquidsoap
>
>  let json.parse ( parsed: {
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    streams: [{
#^^^^^^^^^^^^^^^^ source.liquidsoap
>      codec_name: string
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>   }]
#^^^^^^ source.liquidsoap
>  }) = j
#^^^^^^^^^ source.liquidsoap
>
>  if (list.hd(parsed.streams).codec_name != "flac") then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^ source.liquidsoap
#                                                    ^^^^ source.liquidsoap keyword.control.liquidsoap
>     test.fail()
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  if count() == 3 then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^ source.liquidsoap
#                ^ source.liquidsoap constant.numeric.integer
#                 ^ source.liquidsoap
#                  ^^^^ source.liquidsoap keyword.control.liquidsoap
>    test.pass()
#^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>dir = file.temp_dir("flac")
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^ source.liquidsoap
>
>on_cleanup({file.rmdir(dir)})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>last_time = ref(time())
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>def reopen_when() =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^ source.liquidsoap
>  current_time = time()
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  time_diff = current_time - last_time()
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  last_time := current_time
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  2. < time_diff
#^^ source.liquidsoap
#  ^ source.liquidsoap constant.numeric.integer
#   ^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>output.file(%flac,
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  reopen_delay=2.,
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^^ source.liquidsoap
>  reopen_when=reopen_when,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  on_close=on_close,
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  {time.string("#{dir}/%Hh%M_%S.flac")},
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                     ^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>)
#^^ source.liquidsoap
>