>def filter(s, s') =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.single.liquidsoap
#                ^^^^ source.liquidsoap string.quoted.single.liquidsoap
>  def mkfilter_multi(graph) =
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.audio.input(graph, pass_metadata=true, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.dynaudnorm(graph, s, gausssize=7, correctdc=true, altboundary=true, maxgain=80., b=true, targetrms=1.)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.volume(graph, s, volume="-18dB", precision=2, replaygain=0)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>%ifdef ffmpeg.filter.aexciter
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.aexciter(graph, s, freq=6000.)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>%endif
#^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.volume(graph, s, volume="+20dB", precision=2, replaygain=0)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.aresample(graph, s, sample_rate=192000)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.alimiter(graph, s, limit=0.8, attack=3., release=50., asc=false, asc_level=0., level=true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.aresample(graph, s, sample_rate=48000)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>    s' = ffmpeg.filter.audio.input(graph, s')
#^^^^^ source.liquidsoap string.quoted.single.liquidsoap
#     ^ source.liquidsoap string.quoted.single.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.single.liquidsoap
#                                            ^^ source.liquidsoap string.quoted.single.liquidsoap
>    s = ffmpeg.filter.amix(graph, inputs=2, [s, s'], [])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.single.liquidsoap
#                                                  ^^^^^^^ source.liquidsoap
>
>    s = ffmpeg.filter.ametadata(graph, mode=1, key="tag", value="test", s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap constant.numeric.integer
#                                             ^^^^^^ source.liquidsoap
#                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                    ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                        ^^^^^^^^ source.liquidsoap
#                                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                 ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                      ^^^^^ source.liquidsoap
>
>    ffmpeg.filter.audio.output(graph, pass_metadata=true, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  ffmpeg.filter.create(mkfilter_multi)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = single("annotate:tag=\"s\":@mp3[stereo].mp3")
#^^^^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap string.quoted.double.liquidsoap
#            ^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^^ source.liquidsoap string.quoted.double.liquidsoap constant.character.escape.liquidsoap
#                              ^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^^ source.liquidsoap
>
>s' = single("annotate:tag=\"s'\":@mp3[mono].mp3")
#^ source.liquidsoap
# ^ source.liquidsoap string.quoted.single.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
#                          ^^ source.liquidsoap string.quoted.single.liquidsoap constant.character.escape.liquidsoap
#                            ^ source.liquidsoap string.quoted.single.liquidsoap
#                             ^ source.liquidsoap string.quoted.single.liquidsoap
#                              ^ source.liquidsoap
#                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^^ source.liquidsoap
>
>audio = filter(source.tracks(s).audio, source.tracks(s').audio)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                      ^ source.liquidsoap string.quoted.single.liquidsoap
#                                                       ^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>s = source({audio=audio, metadata = track.metadata(audio)})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>s.on_metadata(fun (m) -> if m["tag"] == "test" then test.pass() end)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>#clock.assign_new(sync="none",[s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>enc = %ffmpeg(%audio.raw(codec="aac"))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>filename = file.temp("tmp",".aac")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>on_cleanup({file.remove(filename)})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>
>output.file(fallible=true, enc, filename, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.single.liquidsoap
>