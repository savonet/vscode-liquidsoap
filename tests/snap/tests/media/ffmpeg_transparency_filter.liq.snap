>log.level.set(4)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>
>background = single("background.jpg")
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^^ source.liquidsoap
>playlist = single("@mp3[stereo].mp3")
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                   ^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^^ source.liquidsoap
>logo = single("logo.png")
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                        ^^ source.liquidsoap
>out = "transparency.mp4"
#^^^^^^ source.liquidsoap
#      ^ source.liquidsoap string.quoted.double.liquidsoap
#       ^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^ source.liquidsoap string.quoted.double.liquidsoap
>
>def logo_overlay(background, logo) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  def mkfilter(graph) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    background  = ffmpeg.filter.video.input(graph, background)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    logo = ffmpeg.filter.video.input(graph, logo)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    v = ffmpeg.filter.overlay(graph, background, logo,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      y="50",
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^^ source.liquidsoap string.quoted.double.liquidsoap
#           ^ source.liquidsoap string.quoted.double.liquidsoap
#            ^^ source.liquidsoap
>      x="25"
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap string.quoted.double.liquidsoap
#         ^^ source.liquidsoap string.quoted.double.liquidsoap
#           ^ source.liquidsoap string.quoted.double.liquidsoap
>    )
#^^^^^^ source.liquidsoap
>
>    ffmpeg.filter.video.output(graph, v)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  ffmpeg.filter.create(mkfilter)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>video = logo_overlay(source.tracks(background).video, source.tracks(logo).video)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = source({audio = source.tracks(playlist).audio, video=video})
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = max_duration(3., s)
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap constant.numeric.integer
#                  ^^^^^^ source.liquidsoap
>
>started = ref(false)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>def on_track(_) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^ source.liquidsoap
>  started := true
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s.on_track(on_track)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>#clock.assign_new(id='test_clock',sync='none',[s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>def on_close (_) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^ source.liquidsoap
>  if not test.done() and !started then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^ source.liquidsoap keyword.operator.liquidsoap
#                        ^^^^^^^^^^ source.liquidsoap
#                                  ^^^^ source.liquidsoap keyword.control.liquidsoap
>    j = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(out)}")
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                              ^^ source.liquidsoap
>
>    let json.parse ( parsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        channel_layout: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_rate: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_fmt: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_name: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string?
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = j
#^^^^^^^^^^^ source.liquidsoap
>
>    video_stream = list.find((fun (stream) -> null.defined(stream.pix_fmt)), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                              ^^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    audio_stream = list.find((fun (stream) -> null.defined(stream.sample_rate)), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                              ^^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    if null.get(video_stream.codec_name) == "h264" and
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(video_stream.pix_fmt) == "yuv420p" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.channel_layout) == "stereo" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                        ^ source.liquidsoap
#                                                         ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.codec_name) == "aac" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap
#                                                  ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.sample_fmt) == "fltp" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.sample_rate) == "44100" then
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                    ^ source.liquidsoap
#                                                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    else
#^^^^ source.liquidsoap
#    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.fail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>encoder = %ffmpeg(
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  %audio(codec="aac"),
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^ source.liquidsoap
>  %video.raw(codec="libx264")
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^^ source.liquidsoap
>)
#^^ source.liquidsoap
>
>output.file(
#^^^^^^^^^^^^^ source.liquidsoap
>  encoder,
#^^^^^^^^^^^ source.liquidsoap
>  on_close=on_close,
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  fallible=true,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  out, s)
#^^^^^^^^^^ source.liquidsoap
>