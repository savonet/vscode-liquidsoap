>s1 = sine(440.)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^ source.liquidsoap
#          ^^^ source.liquidsoap constant.numeric.integer
#             ^^^ source.liquidsoap
>audio = source.tracks(s1).audio
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^ source.liquidsoap
>
>out = "test-multistream.mp4"
#^^^^^^ source.liquidsoap
#      ^ source.liquidsoap string.quoted.double.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
>
>s2 = sine(880.)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^ source.liquidsoap
#          ^^^ source.liquidsoap constant.numeric.integer
#             ^^^ source.liquidsoap
>audio_2 = source.tracks(s2).audio
#^^^^^^ source.liquidsoap
#      ^ source.liquidsoap constant.numeric.integer
#       ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap constant.numeric.integer
#                          ^^^^^^^^ source.liquidsoap
>
>s3 = single("@ffmpeg[format='mp4',@audio[codec='aac',channels=2],@video[codec='libx264']].mp4")
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^ source.liquidsoap
#            ^ source.liquidsoap string.quoted.double.liquidsoap
#             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                              ^^ source.liquidsoap
>video = source.tracks(s3).video
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^^^^^^^ source.liquidsoap
>
>s4 = blank()
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^^ source.liquidsoap
>s4 = insert_metadata(s4)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap constant.numeric.integer
#                       ^^ source.liquidsoap
>metadata = source.tracks(s4).metadata
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                          ^ source.liquidsoap constant.numeric.integer
#                           ^^^^^^^^^^^ source.liquidsoap
>
>s5 = blank()
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^^^ source.liquidsoap
>s5 = chop(s5)
#^ source.liquidsoap
# ^ source.liquidsoap constant.numeric.integer
#  ^^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap constant.numeric.integer
#            ^^ source.liquidsoap
>track_marks = source.tracks(s5).track_marks
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                             ^ source.liquidsoap constant.numeric.integer
#                              ^^^^^^^^^^^^^^ source.liquidsoap
>
>s = source(id="muxed", {
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                     ^^^^ source.liquidsoap
>  audio = audio,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  audio_2 = audio_2,
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap constant.numeric.integer
#         ^^^^^^^^^ source.liquidsoap
#                  ^ source.liquidsoap constant.numeric.integer
#                   ^^ source.liquidsoap
>  video = video,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  metadata = metadata,
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  track_marks = track_marks
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>})
#^^^ source.liquidsoap
>
>meta_seen = ref(false)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>track_seen = ref(false)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s.on_metadata(fun (m) -> if m["foo"] == "bla" then meta_seen := true end)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^^^ source.liquidsoap keyword.control.liquidsoap
#                 ^^^^^^^^ source.liquidsoap
#                         ^^ source.liquidsoap keyword.control.liquidsoap
#                           ^^^ source.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                               ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                   ^^^^^ source.liquidsoap
#                                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                                         ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^ source.liquidsoap
#                                              ^^^^ source.liquidsoap keyword.control.liquidsoap
#                                                  ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                                     ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                        ^^ source.liquidsoap
>s.on_track(fun (_) -> track_seen := true)
#^^^^^^^^^^^ source.liquidsoap
#           ^^^ source.liquidsoap keyword.control.liquidsoap
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
># Remove track marks and metadata
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>let {metadata=_, track_marks=_, ...tracks} = source.tracks(s)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>file_no_meta_seen = ref(true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>file_track_seen = ref(0)
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap constant.numeric.integer
#                       ^^ source.liquidsoap
>
>s = source(id="muxed_final", tracks)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap string.quoted.double.liquidsoap
#               ^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^^^^^^^^^^ source.liquidsoap
>
>s.on_metadata(fun (_) -> file_no_meta_seen := false)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^^^ source.liquidsoap keyword.control.liquidsoap
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>s.on_track(fun (_) -> ref.incr(file_track_seen))
#^^^^^^^^^^^ source.liquidsoap
#           ^^^ source.liquidsoap keyword.control.liquidsoap
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>should_stop = ref(false)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = switch(track_sensitive=false, [({not should_stop()}, s)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>enc = %ffmpeg(
#^^^^^^^^^^^^^^^ source.liquidsoap
>  format="mp4",
#^^^^^^^^^ source.liquidsoap
#         ^ source.liquidsoap string.quoted.double.liquidsoap
#          ^^^ source.liquidsoap string.quoted.double.liquidsoap
#             ^ source.liquidsoap string.quoted.double.liquidsoap
#              ^^ source.liquidsoap
>  %audio(codec="aac"),
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap string.quoted.double.liquidsoap
#                ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                    ^^^ source.liquidsoap
>  %audio_2(codec="libmp3lame", channels=1),
#^^^^^^^^^ source.liquidsoap
#         ^ source.liquidsoap constant.numeric.integer
#          ^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                             ^^^^^^^^^^^ source.liquidsoap
#                                        ^ source.liquidsoap constant.numeric.integer
#                                         ^^^ source.liquidsoap
>  %video.copy
#^^^^^^^^^^^^^^ source.liquidsoap
>)
#^^ source.liquidsoap
>
>def on_close(filename) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  if not test.done() then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>    test.equals(meta_seen(), true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    test.equals(track_seen(), true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    test.equals(file_no_meta_seen(), true)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    test.equals(file_track_seen(), 1)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                   ^ source.liquidsoap constant.numeric.integer
#                                    ^^ source.liquidsoap
>
>    ojson = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(filename)}")
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                       ^^ source.liquidsoap
>
>    let json.parse ( parsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        channel_layout: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_rate: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_fmt: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_name: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string?
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = ojson
#^^^^^^^^^^^^^^^ source.liquidsoap
>
>    test.equals(list.length(parsed.streams), 3)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^ source.liquidsoap constant.numeric.integer
#                                              ^^ source.liquidsoap
>
>    video_stream = list.find((fun (stream) -> null.defined(stream.pix_fmt)), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                              ^^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    aac_stream = list.find((fun (stream) -> stream.codec_name == "aac"), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                            ^^^ source.liquidsoap keyword.control.liquidsoap
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                  ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                      ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    mp3_stream = list.find((fun (stream) -> stream.codec_name == "mp3"), parsed.streams)
#^^^^^^ source.liquidsoap
#      ^^ source.liquidsoap constant.numeric.integer
#        ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                            ^^^ source.liquidsoap keyword.control.liquidsoap
#                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                  ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                      ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    test.equals(video_stream.codec_name, "h264")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^^ source.liquidsoap
>    test.equals(video_stream.pix_fmt, "yuv420p")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                                               ^^ source.liquidsoap
>    test.equals(aac_stream.channel_layout, "stereo")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                   ^^ source.liquidsoap
>    test.equals(mp3_stream.channel_layout, "mono")
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^^ source.liquidsoap constant.numeric.integer
#                    ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^^ source.liquidsoap
>
>    test.pass()
#^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>output.file(fallible=true, on_close=on_close, enc, out, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>meta_count = ref(0)
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap constant.numeric.integer
#                  ^^ source.liquidsoap
>
>thread.run(every=2., fun () -> begin
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap constant.numeric.integer
#                  ^^^ source.liquidsoap
#                     ^^^ source.liquidsoap keyword.control.liquidsoap
#                        ^^^^^^^ source.liquidsoap
#                               ^^^^^ source.liquidsoap keyword.control.liquidsoap
>  if meta_count() < 2 then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap constant.numeric.integer
#                     ^ source.liquidsoap
#                      ^^^^ source.liquidsoap keyword.control.liquidsoap
>    s4.insert_metadata([("foo", "bla")])
#^^^^^ source.liquidsoap
#     ^ source.liquidsoap constant.numeric.integer
#      ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^^ source.liquidsoap
#                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                 ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                     ^^^^ source.liquidsoap
>    ref.incr(meta_count)
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  else
#^^ source.liquidsoap
#  ^^^^ source.liquidsoap keyword.control.liquidsoap
>   should_stop := true
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end)
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^ source.liquidsoap
>