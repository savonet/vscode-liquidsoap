>log.level.set(5)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>settings.decoder.decoders.set(["ffmpeg"])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^^ source.liquidsoap
>
>out_copy = "ffmpeg_inline_encode_decode_video_copy.mp4"
#^^^^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap string.quoted.double.liquidsoap
#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                      ^ source.liquidsoap string.quoted.double.liquidsoap
>
>if file.exists(out_copy) then
#^^ source.liquidsoap keyword.control.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^^^^ source.liquidsoap keyword.control.liquidsoap
>  file.remove(out_copy)
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>out_encode = "ffmpeg_inline_encode_decode_video_encode.mp4"
#^^^^^^^^^^^^^ source.liquidsoap
#             ^ source.liquidsoap string.quoted.double.liquidsoap
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                          ^ source.liquidsoap string.quoted.double.liquidsoap
>if file.exists(out_encode) then
#^^ source.liquidsoap keyword.control.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                           ^^^^ source.liquidsoap keyword.control.liquidsoap
>  file.remove(out_encode)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>v = video.fill(color=0xff0000, blank())
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap constant.numeric.integer
#                      ^^^ source.liquidsoap
#                         ^^^^ source.liquidsoap constant.numeric.integer
#                             ^^^^^^^^^^^ source.liquidsoap
>a = sine(duration=10.)
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^^ source.liquidsoap constant.numeric.integer
#                    ^^^ source.liquidsoap
>s = source.mux.video(video=v, a)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>todo = ref(2)
#^^^^^^^^^^^ source.liquidsoap
#           ^ source.liquidsoap constant.numeric.integer
#            ^^ source.liquidsoap
>
>def on_close (_) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^ source.liquidsoap
>  def check(out) =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^^^^^^^ source.liquidsoap
>    j = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(out)}")
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                              ^^ source.liquidsoap
>
>    let json.parse ( parsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_name: string,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string
#^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = j
#^^^^^^^^^^^ source.liquidsoap
>
>    let [stream] = parsed.streams
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    stream.codec_name == "h264" and
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
#                               ^ source.liquidsoap
#                                ^^^ source.liquidsoap keyword.operator.liquidsoap
>    stream.pix_fmt == "yuv420p"
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                              ^ source.liquidsoap string.quoted.double.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>
>  todo := !todo - 1
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^ source.liquidsoap constant.numeric.integer
>
>  if not test.done () and !todo == 0 then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^^^ source.liquidsoap keyword.operator.liquidsoap
#                         ^^^^^^^^^^ source.liquidsoap
#                                   ^ source.liquidsoap constant.numeric.integer
#                                    ^ source.liquidsoap
#                                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>    if check(out_copy) and check(out_encode) then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^^^ source.liquidsoap keyword.operator.liquidsoap
#                          ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    else
#^^^^ source.liquidsoap
#    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.fail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = ffmpeg.encode.video(
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  %ffmpeg(
#^^^^^^^^^^^ source.liquidsoap
>    %video(codec="libx264")
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^ source.liquidsoap
>  ),
#^^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>)
#^^ source.liquidsoap
>
>output.file(
#^^^^^^^^^^^^^ source.liquidsoap
>  fallible=true,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  on_close=on_close,
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  %ffmpeg(
#^^^^^^^^^^^ source.liquidsoap
>    %video.copy,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  ),
#^^^^^ source.liquidsoap
>  out_copy,
#^^^^^^^^^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>)
#^^ source.liquidsoap
>
>s = ffmpeg.decode.video(s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>#clock.assign_new(sync='none',[s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>output.file(
#^^^^^^^^^^^^^ source.liquidsoap
>  fallible=true,
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>  on_close=on_close,
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  %ffmpeg(
#^^^^^^^^^^^ source.liquidsoap
>    %video(codec="libx264")
#^^^^^^^^^^^^^^^^^ source.liquidsoap
#                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^ source.liquidsoap
>  ),
#^^^^^ source.liquidsoap
>  out_encode,
#^^^^^^^^^^^^^^ source.liquidsoap
>  s
#^^^^ source.liquidsoap
>)
#^^ source.liquidsoap
>