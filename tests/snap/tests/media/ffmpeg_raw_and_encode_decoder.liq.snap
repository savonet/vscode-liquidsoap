>log.level.set(5)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>settings.decoder.decoders.set(["ffmpeg"])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^^ source.liquidsoap
>
>test.skip()
#^^^^^^^^^^^^ source.liquidsoap
>
>fname = argv(default="",1)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^ source.liquidsoap
#                        ^ source.liquidsoap constant.numeric.integer
#                         ^^ source.liquidsoap
>out = "#{fname}+ffmpeg_raw_and_encode_decoder.mp4"
#^^^^^^ source.liquidsoap
#      ^ source.liquidsoap string.quoted.double.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
>
>if file.exists(out) then
#^^ source.liquidsoap keyword.control.liquidsoap
#  ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^^^^ source.liquidsoap keyword.control.liquidsoap
>  file.remove(out)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = single(fname)
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = sequence([s, s, once(s)])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>#clock.assign_new(sync='none',[s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>def on_close (filename) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  if not test.done() then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>    j = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(filename)}")
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                  ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                   ^^ source.liquidsoap
>
>    let json.parse ( parsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        channel_layout: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_rate: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_fmt: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_name: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string?
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = j
#^^^^^^^^^^^ source.liquidsoap
>
>    video_stream = list.find((fun (stream) -> null.defined(stream.pix_fmt)), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                              ^^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    audio_stream = list.find((fun (stream) -> null.defined(stream.sample_rate)), parsed.streams)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                              ^^^ source.liquidsoap keyword.control.liquidsoap
#                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    if null.get(video_stream.codec_name) == "h264" and
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(video_stream.pix_fmt) == "yuv420p" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                                          ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.channel_layout) == "stereo" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                       ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                        ^ source.liquidsoap
#                                                         ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.codec_name) == "aac" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap
#                                                  ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.sample_fmt) == "fltp" and
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                            ^ source.liquidsoap string.quoted.double.liquidsoap
#                                             ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^ source.liquidsoap
#                                                   ^^^ source.liquidsoap keyword.operator.liquidsoap
>       null.get(audio_stream.sample_rate) == "44100" then
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                              ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                    ^ source.liquidsoap
#                                                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    else
#^^^^ source.liquidsoap
#    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.fail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>output.file(fallible=true, on_close=on_close, %ffmpeg(format="mkv",%audio(codec="aac"),%video.raw(codec="libx264")), out, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                              ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                  ^^^^^^^^^^^^^^ source.liquidsoap
#                                                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                 ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                    ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                     ^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                                                                        ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                         ^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                                ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                                 ^^^^^^^^^^^^ source.liquidsoap
>