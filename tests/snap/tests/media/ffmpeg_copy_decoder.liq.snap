>log.level.set(5)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>settings.decoder.decoders.set(["ffmpeg"])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                               ^ source.liquidsoap string.quoted.double.liquidsoap
#                                ^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^^^ source.liquidsoap
>
>fname = argv(default="",1)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^ source.liquidsoap string.quoted.double.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^ source.liquidsoap
#                        ^ source.liquidsoap constant.numeric.integer
#                         ^^ source.liquidsoap
>out = "#{fname}+ffmpeg_copy_decoder.mp4"
#^^^^^^ source.liquidsoap
#      ^ source.liquidsoap string.quoted.double.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                       ^ source.liquidsoap string.quoted.double.liquidsoap
>
>if file.exists(out) then
#^^ source.liquidsoap keyword.control.liquidsoap
#  ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^^^^ source.liquidsoap keyword.control.liquidsoap
>  file.remove(out)
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = single(fname)
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = once(s)
#^^^^^^^^^^^^ source.liquidsoap
>
>#clock.assign_new(sync='none',[s])
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>def on_close (encoded_fname) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  if not test.done() then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^^ source.liquidsoap
#                     ^^^^ source.liquidsoap keyword.control.liquidsoap
>    ijson = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(fname)}")
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                   ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                    ^^ source.liquidsoap
>    ojson = process.read("ffprobe -v quiet -print_format json -show_streams #{process.quote(encoded_fname)}")
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                         ^ source.liquidsoap string.quoted.double.liquidsoap
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                                                            ^^ source.liquidsoap
>
>    let json.parse ( iparsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        index: int,
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        channel_layout: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_rate: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_fmt: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_type: string,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string?
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = ijson
#^^^^^^^^^^^^^^^ source.liquidsoap
>
>    let json.parse ( oparsed : {
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      streams: [{
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        index: int,
#^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        channel_layout: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_rate: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        sample_fmt: string?,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        codec_type: string,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>        pix_fmt: string?
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>      }]
#^^^^^^^^^ source.liquidsoap
>    }) = ojson
#^^^^^^^^^^^^^^^ source.liquidsoap
>
>    filter = fun(type, l) -> list.filter(fun (s) -> s.codec_type == type, l)
#^^^^^^^^^^^^^ source.liquidsoap
#             ^^^ source.liquidsoap keyword.control.liquidsoap
#                ^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                         ^^^ source.liquidsoap keyword.control.liquidsoap
#                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    sort = fun (l) -> list.sort(fun (s1, s2) -> if s1.index < s2.index then -1 else 1 end, l)
#^^^^^^^^^^^ source.liquidsoap
#           ^^^ source.liquidsoap keyword.control.liquidsoap
#              ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                ^^^ source.liquidsoap keyword.control.liquidsoap
#                                   ^^^ source.liquidsoap
#                                      ^ source.liquidsoap constant.numeric.integer
#                                       ^^^ source.liquidsoap
#                                          ^ source.liquidsoap constant.numeric.integer
#                                           ^^^^^ source.liquidsoap
#                                                ^^ source.liquidsoap keyword.control.liquidsoap
#                                                  ^^ source.liquidsoap
#                                                    ^ source.liquidsoap constant.numeric.integer
#                                                     ^^^^^^^^^^ source.liquidsoap
#                                                               ^ source.liquidsoap constant.numeric.integer
#                                                                ^^^^^^^ source.liquidsoap
#                                                                       ^^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                           ^^ source.liquidsoap
#                                                                             ^ source.liquidsoap constant.numeric.integer
#                                                                              ^ source.liquidsoap
#                                                                               ^^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                                   ^ source.liquidsoap
#                                                                                    ^ source.liquidsoap constant.numeric.integer
#                                                                                     ^ source.liquidsoap
#                                                                                      ^^^ source.liquidsoap keyword.control.liquidsoap
#                                                                                         ^^^^^ source.liquidsoap
>
>    let [{index, ...iaudio}] = sort(filter("audio", iparsed.streams))
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    let [{index, ...ivideo}] = sort(filter("video", iparsed.streams))
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    let [{index, ...oaudio}] = sort(filter("audio", oparsed.streams))
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    let [{index, ...ovideo}] = sort(filter("video", oparsed.streams))
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                                            ^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                  ^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>    if iaudio == oaudio and ivideo == ovideo then
#^^^^ source.liquidsoap
#    ^^ source.liquidsoap keyword.control.liquidsoap
#      ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                        ^^^ source.liquidsoap keyword.operator.liquidsoap
#                           ^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                             ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.pass()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    else
#^^^^ source.liquidsoap
#    ^^^^ source.liquidsoap keyword.control.liquidsoap
>      test.fail()
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    end
#^^^^ source.liquidsoap
#    ^^^ source.liquidsoap keyword.control.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>output.file(fallible=true, on_close=on_close, %ffmpeg(format="mkv",%audio.copy,%video.copy), out, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                                             ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                              ^^^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                 ^ source.liquidsoap string.quoted.double.liquidsoap
#                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>