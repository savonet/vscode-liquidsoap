>#!../src/liquidsoap ../libs/stdlib.liq ../libs/deprecations.liq
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>%include "test.liq"
#^^^^^^^^^ source.liquidsoap
#         ^ source.liquidsoap string.quoted.double.liquidsoap
#          ^^^^^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                  ^ source.liquidsoap string.quoted.double.liquidsoap
>
># GH1170 was a tricky bug: we were checking on [is_ready]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># for the crossfaded source only based on the transition source
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># during transitions. However, if the transition source fails,
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># we should still be able to switch back to the main source if
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
># it is ready..
#^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>
>s = noise()
#^^^^^^^^^^^^ source.liquidsoap
>
>s = chop(duration=20., s)
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^^ source.liquidsoap constant.numeric.integer
#                    ^^^^^^ source.liquidsoap
>
>track_count = ref 0
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                  ^ source.liquidsoap constant.numeric.integer
>
>def f(_) =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^ source.liquidsoap
>  track_count := !track_count + 1
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                ^ source.liquidsoap constant.numeric.integer
>  # Let's do 3 tracks here for security.
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  if !track_count > 2 then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap constant.numeric.integer
#                     ^ source.liquidsoap
#                      ^^^^ source.liquidsoap keyword.control.liquidsoap
>    test.pass()
#^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>s = on_track(f,s)
#^^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>s = crossfade(s)
#^^^^^^^^^^^^^^^^^ source.liquidsoap
>
>clock.assign_new(sync="none",[s])
#^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                      ^ source.liquidsoap string.quoted.double.liquidsoap
#                       ^^^^ source.liquidsoap string.quoted.double.liquidsoap
#                           ^ source.liquidsoap string.quoted.double.liquidsoap
#                            ^^^^^^ source.liquidsoap
>
>def on_stop() =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^^^^^^^ source.liquidsoap
>  if !track_count < 3 then
#^^ source.liquidsoap
#  ^^ source.liquidsoap keyword.control.liquidsoap
#    ^^^^^^^^^^^^^^^^ source.liquidsoap
#                    ^ source.liquidsoap constant.numeric.integer
#                     ^ source.liquidsoap
#                      ^^^^ source.liquidsoap keyword.control.liquidsoap
>    test.fail()
#^^^^^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>output.dummy(on_stop=on_stop, fallible=true, s)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>