>def f() =
#^^^ source.liquidsoap keyword.control.liquidsoap
#   ^^^^^^^ source.liquidsoap
>  count = ref(0)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>  def cb() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^ source.liquidsoap
>    count := count() + 1
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.when({true}, cb)
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  thread.pause(1.)
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^^ source.liquidsoap
>  test.equals(count(), 1)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
>
>  # Testing a step with initial true:
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  # True for the first 2s then false for 2s, then true
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  t = time()
#^^^^^^^^^^^^^ source.liquidsoap
>  def p() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^ source.liquidsoap
>    cur_t = time()
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    (t <= cur_t and cur_t < t + 2.) or t + 4. <= cur_t
#^^^^^^^^^^^^^^^^ source.liquidsoap
#                ^^^ source.liquidsoap keyword.operator.liquidsoap
#                   ^^^^^^^^^^^^^ source.liquidsoap
#                                ^ source.liquidsoap constant.numeric.integer
#                                 ^^^ source.liquidsoap
#                                    ^^ source.liquidsoap keyword.operator.liquidsoap
#                                      ^^^^^ source.liquidsoap
#                                           ^ source.liquidsoap constant.numeric.integer
#                                            ^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  count = ref(0)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>  def cb() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^ source.liquidsoap
>    count := count() + 1
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.when(init=false, p, cb)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  thread.pause(5.)
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^^ source.liquidsoap
>  test.equals(count(), 1)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
>
>  # Testing a step with initial false:
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  # false for the first 2s then true
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  t = time()
#^^^^^^^^^^^^^ source.liquidsoap
>  def p() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^ source.liquidsoap
>    t + 2. <= time()
#^^^^^^^^ source.liquidsoap
#        ^ source.liquidsoap constant.numeric.integer
#         ^^^^^^^^^^^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  count = ref(0)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>  def cb() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^ source.liquidsoap
>    count := count() + 1
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.when(p, cb)
#^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>  thread.pause(3.)
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^^ source.liquidsoap
>  test.equals(count(), 1)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
>
>  # Testing when triggering on each change
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  # True for the first 2s then false
#^^ source.liquidsoap
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap comment.line.number-sign.liquidsoap
>  t = time()
#^^^^^^^^^^^^^ source.liquidsoap
>  def p() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^ source.liquidsoap
>    cur_t = time()
#^^^^^^^^^^^^^^^^^^^ source.liquidsoap
>    t <= cur_t and cur_t < t + 2.
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^^^ source.liquidsoap keyword.operator.liquidsoap
#                  ^^^^^^^^^^^^^ source.liquidsoap
#                               ^ source.liquidsoap constant.numeric.integer
#                                ^^ source.liquidsoap
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  count = ref(0)
#^^^^^^^^^^^^^^ source.liquidsoap
#              ^ source.liquidsoap constant.numeric.integer
#               ^^ source.liquidsoap
>  def cb() =
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
#     ^^^^^^^^ source.liquidsoap
>    count := count() + 1
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
>  end
#^^ source.liquidsoap
#  ^^^ source.liquidsoap keyword.control.liquidsoap
>  thread.when(changed=false, every=0.5, p, cb)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                                   ^^^ source.liquidsoap constant.numeric.float
#                                      ^^^^^^^^^ source.liquidsoap
>  thread.pause(5.)
#^^^^^^^^^^^^^^^ source.liquidsoap
#               ^ source.liquidsoap constant.numeric.integer
#                ^^^ source.liquidsoap
>  test.equals(count(), 4)
#^^^^^^^^^^^^^^^^^^^^^^^ source.liquidsoap
#                       ^ source.liquidsoap constant.numeric.integer
#                        ^^ source.liquidsoap
>
>  test.pass()
#^^^^^^^^^^^^^^ source.liquidsoap
>end
#^^^ source.liquidsoap keyword.control.liquidsoap
>
>test.check(f)
#^^^^^^^^^^^^^^ source.liquidsoap
>